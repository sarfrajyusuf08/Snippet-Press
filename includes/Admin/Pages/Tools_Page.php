<?php

namespace SnippetPress\Admin\Pages;

use SnippetPress\Admin\Notices;
use SnippetPress\Admin\Snippet_Service;
use SnippetPress\Infrastructure\Capabilities;
use WP_Error;
use WP_Query;

/**
 * Tools hub for import/export, system info, and plugin logs.
 */
class Tools_Page extends Abstract_Admin_Page {
    private const LOG_OPTION = 'snippet_press_tools_logs';

    public function register(): void {
        add_action( 'admin_post_sp_tools_import', [ $this, 'handle_import' ] );
        add_action( 'admin_post_sp_tools_export', [ $this, 'handle_export' ] );
    }

    public function slug(): string {
        return 'sp-tools';
    }

    public function title(): string {
        return __( 'Tools', 'snippet-press' );
    }

    public function capability(): string {
        return Capabilities::MANAGE;
    }

    public function render(): void {
        $this->assert_capability( $this->capability() );

        $tabs = [
            'import' => __( 'Import', 'snippet-press' ),
            'export' => __( 'Export', 'snippet-press' ),
            'system' => __( 'System Info', 'snippet-press' ),
            'logs'   => __( 'Logs', 'snippet-press' ),
        ];

        $active = isset( $_GET['tab'] ) ? sanitize_key( wp_unslash( $_GET['tab'] ) ) : 'import';
        $active = array_key_exists( $active, $tabs ) ? $active : 'import';

        echo '<div class="wrap sp-tools-page">';
        echo '<h1 class="wp-heading-inline">' . esc_html__( 'Tools', 'snippet-press' ) . '</h1>';
        echo '<hr class="wp-header-end">';

        $this->render_tabs( $tabs, $active );
        echo '<div class="sp-search-replace__panels">';

        switch ( $active ) {
            case 'export':
                $this->render_export_tab();
                break;
            case 'system':
                $this->render_system_tab();
                break;
            case 'logs':
                $this->render_logs_tab();
                break;
            case 'import':
            default:
                $this->render_import_tab();
                break;
        }

        echo '</div>';
        echo '</div>';
    }

    protected function render_tabs( array $tabs, string $active ): void {
        echo '<nav class="nav-tab-wrapper sp-editor-tabs">';
        foreach ( $tabs as $key => $label ) {
            $classes = 'nav-tab' . ( $key === $active ? ' nav-tab-active' : '' );
            $url     = esc_url( add_query_arg( 'tab', $key ) );
            printf( '<a href="%1$s" class="%2$s">%3$s</a>', $url, esc_attr( $classes ), esc_html( $label ) );
        }
        echo '</nav>';
    }

    protected function render_import_tab(): void {
        echo '<div class="sp-panel">';
        echo '<h2>' . esc_html__( 'Import Snippet Library', 'snippet-press' ) . '</h2>';
        echo '<p class="description">' . esc_html__( 'Upload a JSON file generated by Snippet Press to restore snippets and their metadata.', 'snippet-press' ) . '</p>';

        echo '<form method="post" action="' . esc_url( admin_url( 'admin-post.php' ) ) . '" enctype="multipart/form-data" class="sp-search-replace__form">';
        wp_nonce_field( 'sp_tools_import' );
        echo '<input type="hidden" name="action" value="sp_tools_import" />';

        echo '<div class="field">';
        echo '<label for="sp-import-file">' . esc_html__( 'Import file (.json)', 'snippet-press' ) . '</label>';
        echo '<input type="file" id="sp-import-file" name="import_file" accept="application/json,.json" class="sp-input" required />';
        echo '</div>';

        echo '<p class="description">' . esc_html__( 'Large imports may take a moment. You will receive a confirmation notice once processing finishes.', 'snippet-press' ) . '</p>';

        echo '<div class="sp-form-actions">';
        submit_button( esc_html__( 'Import Snippets', 'snippet-press' ), 'primary', 'submit', false );
        echo '</div>';

        echo '</form>';
        echo '</div>';
    }

    protected function render_export_tab(): void {
        $types = $this->available_types();

        echo '<div class="sp-panel">';
        echo '<h2>' . esc_html__( 'Export Snippet Library', 'snippet-press' ) . '</h2>';
        echo '<p class="description">' . esc_html__( 'Choose the snippet types to include. The export is compatible with the importer above.', 'snippet-press' ) . '</p>';

        echo '<form method="post" action="' . esc_url( admin_url( 'admin-post.php' ) ) . '" class="sp-search-replace__form">';
        wp_nonce_field( 'sp_tools_export' );
        echo '<input type="hidden" name="action" value="sp_tools_export" />';

        echo '<div class="field">';
        echo '<label>' . esc_html__( 'Snippet types', 'snippet-press' ) . '</label>';
        echo '<div class="sp-checkbox-grid">';
        foreach ( $types as $slug => $label ) {
            echo $this->checkbox_input( 'types[]', $slug, true, $label );
        }
        echo '</div>';
        echo '</div>';

        echo '<div class="sp-form-actions">';
        submit_button( esc_html__( 'Export Snippets', 'snippet-press' ), 'primary', 'submit', false );
        echo '</div>';

        echo '</form>';
        echo '</div>';
    }

    protected function render_system_tab(): void {
        $info = $this->system_info();

        echo '<div class="sp-panel">';
        echo '<h2>' . esc_html__( 'System Information', 'snippet-press' ) . '</h2>';
        echo '<table class="widefat striped">';
        echo '<tbody>';
        foreach ( $info as $label => $value ) {
            printf( '<tr><th>%1$s</th><td><code>%2$s</code></td></tr>', esc_html( $label ), esc_html( $value ) );
        }
        echo '</tbody>';
        echo '</table>';
        echo '</div>';
    }

    protected function render_logs_tab(): void {
        $logs    = $this->get_logs();
        $enabled = $this->logging_enabled();

        echo '<div class="sp-panel">';
        echo '<h2>' . esc_html__( 'Tools Activity Log', 'snippet-press' ) . '</h2>';

        if ( ! $enabled ) {
            echo '<p class="description">' . esc_html__( 'Logging is currently disabled. Enable it from Settings â†’ Logging to capture future imports and exports.', 'snippet-press' ) . '</p>';
        }

        if ( empty( $logs ) ) {
            echo '<p>' . esc_html__( 'No activity recorded yet. Imports, exports, and other tool actions will appear here.', 'snippet-press' ) . '</p>';
            echo '</div>';
            return;
        }

        echo '<table class="widefat striped">';
        echo '<thead><tr>';
        echo '<th>' . esc_html__( 'Date', 'snippet-press' ) . '</th>';
        echo '<th>' . esc_html__( 'Type', 'snippet-press' ) . '</th>';
        echo '<th>' . esc_html__( 'Message', 'snippet-press' ) . '</th>';
        echo '</tr></thead><tbody>';
        foreach ( $logs as $entry ) {
            $date    = isset( $entry['time'] ) ? wp_date( get_option( 'date_format' ) . ' ' . get_option( 'time_format' ), (int) $entry['time'] ) : '';
            $type    = strtoupper( $entry['type'] ?? 'info' );
            $message = $entry['message'] ?? '';
            echo '<tr>';
            echo '<td>' . esc_html( $date ) . '</td>';
            echo '<td><span class="sp-badge">' . esc_html( $type ) . '</span></td>';
            echo '<td>' . esc_html( $message ) . '</td>';
            echo '</tr>';
        }
        echo '</tbody></table>';
        echo '</div>';
    }

    public function handle_import(): void {
        $this->assert_capability( $this->capability() );
        check_admin_referer( 'sp_tools_import' );

        if ( empty( $_FILES['import_file']['tmp_name'] ) ) {
            Notices::add( __( 'Please choose a JSON file to import.', 'snippet-press' ), 'error' );
            wp_safe_redirect( $this->page_url( 'import' ) );
            exit;
        }

        $file = $_FILES['import_file'];

        if ( ! isset( $file['error'] ) || UPLOAD_ERR_OK !== (int) $file['error'] ) {
            Notices::add( __( 'File upload failed. Please try again.', 'snippet-press' ), 'error' );
            wp_safe_redirect( $this->page_url( 'import' ) );
            exit;
        }

        $contents = file_get_contents( $file['tmp_name'] );

        if ( false === $contents ) {
            Notices::add( __( 'Unable to read the uploaded file.', 'snippet-press' ), 'error' );
            wp_safe_redirect( $this->page_url( 'import' ) );
            exit;
        }

        $data = json_decode( $contents, true );

        if ( ! is_array( $data ) ) {
            Notices::add( __( 'The uploaded file is not a valid Snippet Press export.', 'snippet-press' ), 'error' );
            wp_safe_redirect( $this->page_url( 'import' ) );
            exit;
        }

        $snippets = isset( $data['snippets'] ) ? (array) $data['snippets'] : [];

        if ( empty( $snippets ) ) {
            Notices::add( __( 'No snippets were found in the import file.', 'snippet-press' ), 'warning' );
            wp_safe_redirect( $this->page_url( 'import' ) );
            exit;
        }

        $created = 0;
        $errors  = [];

        foreach ( $snippets as $snippet ) {
            $result = $this->import_snippet( (array) $snippet );

            if ( is_wp_error( $result ) ) {
                $errors[] = $result->get_error_message();
                continue;
            }

            $created++;
        }

        if ( $created ) {
            Notices::add( sprintf( __( '%d snippets imported successfully.', 'snippet-press' ), (int) $created ) );
        }

        if ( ! empty( $errors ) ) {
            foreach ( array_slice( $errors, 0, 5 ) as $message ) {
                Notices::add( $message, 'error' );
            }
            if ( count( $errors ) > 5 ) {
                Notices::add( sprintf( __( 'Import completed with %d additional errors.', 'snippet-press' ), count( $errors ) - 5 ), 'error' );
            }
        }

        $this->record_log( 'import', sprintf( __( 'Imported %d snippets (%d errors).', 'snippet-press' ), (int) $created, count( $errors ) ) );

        wp_safe_redirect( $this->page_url( 'import' ) );
        exit;
    }

    public function handle_export(): void {
        $this->assert_capability( $this->capability() );
        check_admin_referer( 'sp_tools_export' );

        $types = isset( $_POST['types'] ) ? array_filter( array_map( 'sanitize_key', (array) $_POST['types'] ) ) : [];

        if ( empty( $types ) ) {
            Notices::add( __( 'Select at least one snippet type to export.', 'snippet-press' ), 'error' );
            wp_safe_redirect( $this->page_url( 'export' ) );
            exit;
        }

        $ids = $this->find_snippet_ids_by_types( $types );

        if ( empty( $ids ) ) {
            Notices::add( __( 'No snippets matched the selected types.', 'snippet-press' ), 'warning' );
            wp_safe_redirect( $this->page_url( 'export' ) );
            exit;
        }

        $snippets = Snippet_Service::prepare_export_data( $ids );

        $payload = [
            'version'    => defined( 'SNIPPET_PRESS_VERSION' ) ? SNIPPET_PRESS_VERSION : '1.0.0',
            'exportedAt' => gmdate( 'c' ),
            'types'      => $types,
            'snippets'   => $snippets,
        ];

        $filename = 'snippet-press-export-' . gmdate( 'Ymd-His' ) . '.json';

        $this->record_log( 'export', sprintf( __( 'Exported %d snippets.', 'snippet-press' ), count( $snippets ) ) );

        nocache_headers();
        header( 'Content-Type: application/json; charset=utf-8' );
        header( 'Content-Disposition: attachment; filename=' . $filename );
        echo wp_json_encode( $payload, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES );
        exit;
    }

    protected function import_snippet( array $data ) {
        $payload = [
            'name'        => isset( $data['name'] ) ? sanitize_text_field( $data['name'] ) : '',
            'code'        => isset( $data['code'] ) ? (string) $data['code'] : '',
            'description' => isset( $data['description'] ) ? sanitize_textarea_field( $data['description'] ) : '',
            'status'      => isset( $data['status'] ) ? sanitize_key( $data['status'] ) : 'disabled',
            'type'        => isset( $data['type'] ) ? sanitize_key( $data['type'] ) : 'php',
            'scopes'      => isset( $data['scopes'] ) ? array_map( 'sanitize_key', (array) $data['scopes'] ) : [],
            'priority'    => isset( $data['priority'] ) ? (int) $data['priority'] : 10,
        ];

        if ( '' === $payload['name'] || '' === $payload['code'] ) {
            return new WP_Error( 'sp_invalid_import_snippet', __( 'Skipped a snippet with missing name or code.', 'snippet-press' ) );
        }

        if ( isset( $data['notes'] ) ) {
            $payload['notes'] = (string) $data['notes'];
        }

        if ( isset( $data['variables'] ) ) {
            $payload['variables'] = (array) $data['variables'];
        }

        if ( isset( $data['conditions'] ) ) {
            $payload['conditions'] = (array) $data['conditions'];
        }

        $result = Snippet_Service::create( $payload );

        if ( is_wp_error( $result ) ) {
            return $result;
        }

        $post_id = (int) $result;

        if ( isset( $data['notes'] ) ) {
            update_post_meta( $post_id, '_sp_notes', wp_kses_post( $data['notes'] ) );
        }

        if ( isset( $data['variables'] ) ) {
            update_post_meta( $post_id, '_sp_variables', (array) $data['variables'] );
        }

        if ( isset( $data['conditions'] ) ) {
            update_post_meta( $post_id, '_sp_conditions', (array) $data['conditions'] );
        }

        return $post_id;
    }

    protected function available_types(): array {
        return [
            'php'  => __( 'PHP', 'snippet-press' ),
            'css'  => __( 'CSS', 'snippet-press' ),
            'js'   => __( 'JavaScript', 'snippet-press' ),
            'html' => __( 'HTML', 'snippet-press' ),
            'text' => __( 'Text', 'snippet-press' ),
        ];
    }

    protected function find_snippet_ids_by_types( array $types ): array {
        $meta_query = [ 'relation' => 'OR' ];
        foreach ( $types as $type ) {
            $meta_query[] = [
                'key'   => '_sp_type',
                'value' => $type,
            ];
        }

        $query = new WP_Query([
            'post_type'      => 'sp_snippet',
            'post_status'    => [ 'draft', 'pending', 'publish' ],
            'posts_per_page' => -1,
            'fields'         => 'ids',
            'meta_query'     => $meta_query,
        ]);

        return $query->posts ? array_map( 'absint', $query->posts ) : [];
    }

    protected function system_info(): array {
        global $wpdb;

        return [
            __( 'Site URL', 'snippet-press' )      => get_site_url(),
            __( 'Home URL', 'snippet-press' )      => home_url(),
            __( 'WordPress Version', 'snippet-press' ) => get_bloginfo( 'version' ),
            __( 'PHP Version', 'snippet-press' )    => PHP_VERSION,
            __( 'MySQL Version', 'snippet-press' )  => method_exists( $wpdb, 'db_version' ) ? $wpdb->db_version() : __( 'Unknown', 'snippet-press' ),
            __( 'Plugin Version', 'snippet-press' ) => defined( 'SNIPPET_PRESS_VERSION' ) ? SNIPPET_PRESS_VERSION : 'dev',
            __( 'WP Memory Limit', 'snippet-press' ) => wp_convert_hr_to_bytes( WP_MEMORY_LIMIT ) ? size_format( wp_convert_hr_to_bytes( WP_MEMORY_LIMIT ) ) : WP_MEMORY_LIMIT,
            __( 'PHP Memory Limit', 'snippet-press' ) => ini_get( 'memory_limit' ),
            __( 'Max Upload Size', 'snippet-press' ) => size_format( wp_max_upload_size() ),
            __( 'Debug Mode', 'snippet-press' )      => defined( 'WP_DEBUG' ) && WP_DEBUG ? __( 'Enabled', 'snippet-press' ) : __( 'Disabled', 'snippet-press' ),
            __( 'Timezone', 'snippet-press' )        => wp_timezone_string(),
        ];
    }

    protected function record_log( string $type, string $message ): void {
        if ( ! $this->logging_enabled() ) {
            return;
        }

        $log = [
            'time'    => time(),
            'type'    => $type,
            'message' => $message,
        ];

        $logs = $this->get_logs();
        array_unshift( $logs, $log );
        $logs = array_slice( $logs, 0, 30 );
        update_option( self::LOG_OPTION, $logs );
    }

    protected function logging_enabled(): bool {
        $settings = $this->settings()->all();
        return ! empty( $settings['logging_enabled'] );
    }

    /**
     * @return array<int,array<string,mixed>>
     */
    protected function get_logs(): array {
        $logs = get_option( self::LOG_OPTION, [] );
        return is_array( $logs ) ? $logs : [];
    }

    protected function page_url( string $tab ): string {
        return esc_url_raw(
            add_query_arg(
                [
                    'page' => $this->slug(),
                    'tab'  => $tab,
                ],
                admin_url( 'admin.php' )
            )
        );
    }
}